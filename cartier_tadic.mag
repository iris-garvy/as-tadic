compute_genus := function(d,p);
    return Integers()!((d+1-2) * (p-1)/2);
end function;


p := 3;
n := 3;

Fp := FiniteField(p);
A<T> := PolynomialRing(Fp);
An<T> := quo<A | T^(p^n)>;
Rp<x> := PolynomialRing(An);

//set polynomial
f := x^5+x^2;
d := Degree(f);
matrix_size := Floor((p-1)*d/p);

//find alpha to the first level
alpha := 1 + T*f + T^2 * (f - f^2);

//calculate alpha inverse
alpha_inverse := 1;

for i in [1..p-1] do
    alpha_inverse := alpha_inverse + (1 - alpha*alpha_inverse);
end for;

//write out cartier matrix
cartier_coefficients := Coefficients(alpha_inverse);

nM := [[An!0^^matrix_size]^^matrix_size];

for i in [1..matrix_size] do
    for j in [1..matrix_size] do
        if p*i - j lt 0 or p*i - j + 1 gt #cartier_coefficients then
            nM[i][j] := 0;
        else
            nM[i][j] := cartier_coefficients[p*i-j+1]; 
        end if;
    end for;
end for; 

M_1 := MatrixRing(An,matrix_size);
nM := Matrix(nM);

//okay lets construct the matrix that converts the R basis into the M_1 Basis

//I was gonna saw we need to find i(n) but thats gotta just be the genus so we can just use compute genus (for our simple case)
// wait its not the genus im confused :sob:

//the following will be only for p=3 before i figure out how to generalize it more

r_coefficients := [2+2*T, 2];

find_mu := function(i,d,p);
    answer := p-1;
    while (answer-1)*d/p gt i do
        answer := answer - 1;
    end while;
    return answer;
end function;

mu_index := [];
for i in [1..matrix_size] do
    Append(~mu_index, find_mu(i,d,p));
end for;

e_coefficients := [];
for i in [1..matrix_size] do
    Append(~e_coefficients, (T^mu_index[i])*r_coefficients[mu_index[i]]);
end for;

// e_coefficients_inverses := [An!1^^matrix_size];
// for i in [1..matrix_size] do
//     for j in [1..p-1] do
//     e_coefficients_inverses[i] := e_coefficients_inverses[i] + (1 - e_coefficients[i]*e_coefficients_inverses[i]);
//     end for;
// end for;


change_matrix_basis := DiagonalMatrix(M_1, e_coefficients);





