compute_genus := function(d,p);
    return Integers()!((d+1-2) * (p-1)/2);
end function;

find_mu := function(i,d,p);
    answer := p-1;
    while (answer-1)*d/p gt i do
        answer := answer - 1;
    end while;
    return answer;
end function;

truncate_poly := function(f,cutoff,R)
    T := R.1;
    return &+[ Coefficient(f, i) * T^i : i in [0..cutoff] ];
end function;


apply_T := function(f : n := 1)
    y := Parent(f).1;
    for i in [1..n] do
        f := Evaluate(f, y+1) - f;
    end for;
    return f;
end function;

apply_Tpoly := function(f, polynomial)
    R:= Parent(f);
    d := Degree(polynomial);
    polynomial_list := [(R!0)^^d];
    for i in [0..d] do
        if Coefficient(polynomial,i) ne 0 then
            Append(~polynomial_list, Coefficient(polynomial,i)*apply_T(f: n:=i));
        end if;
    end for;
    return &+polynomial_list;
end function;


Fp := FiniteField(p);
A<T> := PolynomialRing(Fp);
B<y> := PolynomialRing(A);
r_list := [];
i := 1;
///for i in [1..p-1] do
    r_coeff := -1/LeadingCoefficient(apply_T(-y^(p-1): n:= i))*T^i; //note that this is a terrible implementation. I just didnt want to think about how to do it smart.
    transformed_w0 := apply_Tpoly(-y^(p-1),r_coeff);

    while transformed_w0 ne -y^((p-1)-i) do 
        difference := -y^((p-1)-i) - transformed_w0;
        r_coeff +:= T^(p-1-Degree(difference));
        transformed_w0 := apply_Tpoly(-y^(p-1),r_coeff);
    end while;
    r_coeff := r_coeff/(T^Degree(TrailingTerm(r_coeff)));
    Append(~r_list,r_coeff);

//end for;

