//Covers of P^1 ramified at one point (assumed to be zero) in characteristic p with equation y^p - y = f with ord_0(f) = -d, p not dividing d

//Append(~list,3); adds 3 to the end.  
//~ is pass by reference; this modifies original list, so is more efficient


//Warning: MAGMA using 1-based array indexing

//compute the maximal order of a pole for y^i term
pole_order := function(i,d,p);
	return Ceiling( (p-1-i)*d /p);
end function;

//for multiple poles, replace d+1 by sum of d's +1
compute_genus := function(d,p);
    return Integers()!((d+1-2) * (p-1)/2);
end function;

//need to treat choosing from 0 things as 1
modified_binomial := function(n,m);
    if n eq 0 then
        return 1;
    end if;
    return Binomial(n,m);
end function;

gamma := function(f,d,FF,i,m)
    t := FF.1;  //generator of function field
    p := Characteristic(FF);
    g := compute_genus(d,p);
    Q := Zeroes(t)[1]; //the point (0,0)

    indexes := [ ]; //the index of where the y^i differentials start
    count := 0;
    for i in [0..(p-1)] do
        Append(~indexes, count+1 ); // add one because of 1-based array indexing.  This is the only thing that will be changed when switching to C's 0-based indexing
        count := count + Max(pole_order(i,d,p)-1,0);
    end for;
    //we're building the matrix one column at a time, except we really are doing the transpose.  Some efficiency could be gained by building it in a different order using random access to an array instead of appending
// in that case, the indexes will be quite helpful

    if count ne g then
        print "Genus seems incompatible",count,g;
    end if;

    for j in [0..p-1] do
        if j le i then
            basic_expression := (-1)^(i-j) * f^(i-j) * modified_binomial(i,j) *t^(m) ; //improvement: compute these all at once to avoid duplicating work
            pseries:= Expand(basic_expression,Q:RelPrec:=d*p);  //write as power series centered at Q=0,  RelPrec says how many positive terms to compute
            for k in [2..pole_order(j,d,p)] do
                Append(~elements,Coefficient(pseries,p-1-p*k)); //coefficient of t^k dt y^j in Cartier( t^(-m) dt y^i )
            end for;
        else
            for k in [2..pole_order(j,d,p)] do
                Append(~elements,0);  //automatically nothing here
            end for;
        end if;
    end for;
    
    return elements;
end function;

//function f defining extension, d, prime p, K coefficient field
//order the basis of differentials at t^{-2} dt, t^{-3} dt, ..., t^{-2} dt y, t^{-3} dt y, ...
build_matrix := function(f,d,FF);
    t := FF.1;  //generator of function field
    p := Characteristic(FF);
    g := compute_genus(d,p);
    elements := [ ]; //ordered going across columns one by one.  
    Q := Zeroes(t)[1]; //the point (0,0)

    indexes := [ ]; //the index of where the y^i differentials start
    count := 0;
    for i in [0..(p-1)] do
        Append(~indexes, count+1 ); // add one because of 1-based array indexing.  This is the only thing that will be changed when switching to C's 0-based indexing
        count := count + Max(pole_order(i,d,p)-1,0);
    end for;
    //we're building the matrix one column at a time, except we really are doing the transpose.  Some efficiency could be gained by building it in a different order using random access to an array instead of appending
// in that case, the indexes will be quite helpful

    if count ne g then
        print "Genus seems incompatible",count,g;
    end if;

    //build rows
    for i in [0..p-1] do
        for m in [2..pole_order(i,d,p)] do
            //get the part of Cartier( t^(-m) dt y^i) involving y^j
            for j in [0..p-1] do
                if j le i then
                    basic_expression := (-1)^(i-j) * f^(i-j) * modified_binomial(i,j) *t^(-m) ; //improvement: compute these all at once to avoid duplicating work
                    pseries:= Expand(basic_expression,Q:RelPrec:=d*p);  //write as power series centered at Q=0,  RelPrec says how many positive terms to compute
                    for k in [2..pole_order(j,d,p)] do
                        Append(~elements,Coefficient(pseries,p-1-p*k)); //coefficient of t^k dt y^j in Cartier( t^(-m) dt y^i )
                    end for;
                else
                    for k in [2..pole_order(j,d,p)] do
                        Append(~elements,0);  //automatically nothing here
                    end for;
                end if;
            end for;
        end for;
    end for;
    
    return elements;
end function;

showmatrix := function(f,d,FF);
    elements := build_matrix(f,d,FF);
    g := compute_genus(d,Characteristic(FF));
    A := Transpose(Matrix(g,g,elements));
    return A;
end function;

//Compute the a-number of y^p -y = f, where f has a pole of degree d at 0
anumber := function(f,d,FF);
    elements := build_matrix(f,d,FF);
    g := compute_genus(d,Characteristic(FF));
    A := Transpose(Matrix(g,g,elements));
    return g-Rank(A);
end function;

//use built-in functions to check
builtin_anumber := function(FF,f,p);
    P<y> := PolynomialRing(FF);
    F<alpha> := FunctionField(y^p - y - f);
    return Dimension(Kernel(CartierRepresentation(F)));
end function;

//get random f
rand_poly:=function(t,d,p) ;
    K:=GF(p);
    poly := t^(-d) ; //issue: what is t
    for i in [1..d-1] do
        if (i mod p ne 0) then
            poly := poly + Random(K)*t^(-i);
        end if;
    end for;
    return poly;
end function;

//can we find disagreement?
testing:=function(d,p)
    K := GF(p);
    FF<t>:=FunctionField(K);

    count :=0;
    while count le 100 do
        f:=rand_poly(t,d,p);
        a1 := anumber(f,d,FF);
        a2 := builtin_anumber(FF,f,p);
        if a1 ne a2 then
            print f,a1,a2;
            return false;
        end if;
        count := count+1;
        if count mod 10 eq 0 then
            print count;
        end if;
    end while;
    return true;
end function;

//collect statistics
sample_old:=function(d,p,count);
    K:=GF(p);
    FF<t>:=FunctionField(K);

    anumbers:= AssociativeArray();

    if (d mod p eq 0) then
	    return "Invalid";
    end if;

    max:=0;
    pol:=0;
    n :=0;
    while (n lt count) do
        n := n+1;
        if n mod 500 eq 0 then
            print "Finished",n;
        end if;
        f := rand_poly(t,d,p);
        a:=builtin_anumber(FF,f,p); 
        if IsDefined(anumbers,a) then
	        anumbers[a] := anumbers[a]+1;
        else
	        anumbers[a] := 1;
        end if;
        if (a gt max) then
	        max:=a;
	        pol:=f;
        end if;
        
    end while;

    "Statistics",d,p;
    for n in [0..max] do
        if IsDefined(anumbers,n) then
		    print n, anumbers[n];
	    end if;
    end for;
    return f;
end function;

//collected_statistics
sample_new:=function(d,p,count);
    K:=GF(p);
    FF<t>:=FunctionField(K);

    anumbers:= AssociativeArray();

    if (d mod p eq 0) then
	    return "Invalid";
    end if;

    max:=0;
    pol:=0;
    n :=0;
    while (n lt count) do
        n := n+1;
        if n mod 500 eq 0 then
            print "Finished",n;
        end if;
        f := rand_poly(t,d,p);
        a:=anumber(f,d,FF); 
        if IsDefined(anumbers,a) then
	        anumbers[a] := anumbers[a]+1;
        else
	        anumbers[a] := 1;
        end if;
        if (a gt max) then
	        max:=a;
	        pol:=f;
        end if;
        
    end while;

    "Statistics",d,p;
    for n in [0..max] do
        if IsDefined(anumbers,n) then
		    print n, anumbers[n];
	    end if;
    end for;
    return f;
end function;

// K := GF(19);
// FF<t> := FunctionField(K);
// f:= t^(-40) + 18 * t^(-36) + 18* t^(-32) + 18 * t^(-28) + 18 * t^(-24) + t^(-20) + t^(-16) + t^(-12) + t^(-8) + t^(-4);
// anumber(f,40,FF);
